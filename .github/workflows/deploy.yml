name: CI/CD Pipeline

permissions:
  contents: read
  packages: write     
  id-token: write

on:
  push:
    branches: [ "main" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.2-fpm-bullseye'
        extensions: sqlite3, pdo_sqlite
        
    - name: Install ODBC dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unixodbc unixodbc-dev
   
    - name: Install SQLite
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      working-directory: src
      
    - name: Install Dependencies with Debugging
      run: composer install -vvv --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      working-directory: src

    - name: Generate key
      run: php artisan key:generate
      working-directory: src

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      working-directory: src
      
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
      working-directory: src

    - name: Build React assets
      run: npm install && npm run build
      working-directory: src
        
    - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test
      working-directory: src

  cypress-run:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false 
      matrix:
        containers: [1, 2] 

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy .env.example on host
        run: cp src/.env.example src/.env

      - name: Build and start Docker containers
        run: |
          docker compose -f docker-compose.test.yml up -d --build --force-recreate

      - name: Composer install + APP_KEY + migrate inside app
        run: |
          docker compose -f docker-compose.test.yml exec -T app \
            sh -c "composer install --no-interaction --optimize-autoloader \
                   && php artisan key:generate --ansi --force \
                   && php artisan migrate --force --seed --no-interaction"

      - name: Get logs for micelle-web-1
        run: docker logs micelle-web-1
      - name: Get logs for micelle-db-1
        run: docker logs micelle-db-1
      - name: Get logs for micelle-app-1
        run: docker logs micelle-app-1
      - name: Wait for server to start

        run: sleep 100
      - name: Check running containers
        run: docker ps

      - name: Install dependencies
        run: npm ci
        working-directory: src

      - name: Build application
        run: npm run build
        working-directory: src
   
      - name: Start server
        run: npm start &
        working-directory: src

      - name: Check server status
        run: curl -I http://localhost || exit 1
        working-directory: src

      - name: Cypress run
        run: |
          cd src
          echo "Now in $(pwd), running Cypress..."
          npx cypress run --record --parallel

        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.FOR_GHCR }}  

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infra/php/Dockerfile.prod
          push: true
          no-cache: true
          tags: ghcr.io/141takahiro/micelle-app:${{ github.sha }}


  deploy-to-ec2:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |

            echo "${{ secrets.FOR_GHCR }}" | docker login ghcr.io -u 141Takahiro --password-stdin

            if grep -q '"ghcr.io"' ~/.docker/config.json; then
            echo "GHCR login successful."
            else
              echo "GHCR login failed." && exit 1
            fi

            cd ~/micelle
            git fetch origin main
            git reset --hard origin/main
            git clean -fd

            docker-compose -f docker-compose.prod.yml down -v
            docker system prune -a -f

            export TAG=$(git rev-parse HEAD)
            echo "TAG is ${TAG}"

            docker-compose -f docker-compose.prod.yml pull
            docker images

            docker-compose -f docker-compose.prod.yml up -d --remove-orphans