# ─────────────── Builder Stage ───────────────
FROM php:8.3-fpm AS builder

# 必要なパッケージのインストール
RUN apt-get update && apt-get install -y \
    curl \
    gnupg2 \
    git \
    unzip

# Node.js のセットアップと npm のアップデート
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@11.3.0

WORKDIR /src

# 1. composer や Laravel の artisan スクリプトで環境ファイル(.env)が必要なため、.env.example を .env にコピー
COPY src/.env.example .env

# 2. Composer 用ファイルのみをコピーし、依存ライブラリ（vendor）をインストール
COPY src/composer.json src/composer.lock ./
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \
    composer self-update 2.8.6 && \
    composer install --no-dev --optimize-autoloader

# ※もしビルド時にartisanのコマンド実行で有効な APP_KEY が必要な場合は、ここで「php artisan key:generate --force」を実行します。
# RUN php artisan key:generate --force

# 3. アプリケーション全体をコピー（vendorはそのままで上書きされないように）
COPY src/ ./

# 4. npm 用依存ファイルをコピーして npm install と npm run build を実行
COPY src/package*.json ./
RUN npm install
RUN npm run build

# ─────────────── Runtime Stage ───────────────
FROM php:8.3-fpm

WORKDIR /var/www/html

# 本番実行に必要な SQLite のランタイムライブラリと PHP 拡張のインストール
RUN apt-get update && apt-get install -y \
    sqlite3 \
    libsqlite3-dev && \
    docker-php-ext-install pdo_sqlite && \
    rm -rf /var/lib/apt/lists/*

# Builder Stage で構築した成果物全体をコピー
COPY --from=builder /src/ /var/www/html/

# ビルド時に利用した一時的な .env を削除（本番環境では外部から安全に環境変数が注入される）
RUN rm -f /var/www/html/.env

EXPOSE 9000

CMD ["php-fpm"]