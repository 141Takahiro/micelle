# ─────────────── Builder Stage ───────────────
FROM php:8.3-fpm AS builder

# 必要なパッケージのインストール
RUN apt-get update && apt-get install -y \
    curl \
    gnupg2 \
    git \
    unzip

# Node.js のセットアップと npm のアップデート
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@11.3.0

WORKDIR /src

# 1. .env.example を .env として配置（Laravel の composer スクリプト実行に必要な環境変数をセット）
COPY src/.env.example .env

# 2. Composer 用ファイルをコピー
COPY src/composer.json src/composer.lock ./

# 3. Composer のインストール、バージョン更新、依存ライブラリのインストールを実施
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \
    composer self-update 2.8.6 && \
    composer install --no-dev --optimize-autoloader && \
    php artisan key:generate --force

# 4. npm 用依存ファイルをコピーしてインストール
COPY src/package*.json ./
RUN npm install

# 5. プロジェクト全体のソースコードをコピーしてビルド実行
COPY src/ ./
RUN npm run build

# ─────────────── Runtime Stage ───────────────
FROM php:8.3-fpm

WORKDIR /var/www/html

# 本番実行に必要な SQLite のランタイムライブラリと PHP 拡張をインストール
RUN apt-get update && apt-get install -y \
    sqlite3 \
    libsqlite3-dev && \
    docker-php-ext-install pdo_sqlite && \
    rm -rf /var/lib/apt/lists/*

# Builder Stage で構築された成果物をコピー
COPY --from=builder /src/ /var/www/html/

# ビルド時に利用した .env を削除し、本番環境では外部からの環境変数が優先されるようにする
RUN rm -f /var/www/html/.env

EXPOSE 9000

CMD ["php-fpm"]